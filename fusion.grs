% The package [init] add features [MGloss] and [MSeg] on each tokens which will be concerned by the next package [suff].
package init {
  rule suff {
    pattern { SUFF [form = re"-.*", !MGloss]; }
    commands { SUFF.MGloss = SUFF.Gloss; SUFF.MSeg = SUFF.lemma }
  }

  % When the stem is at distance 1 from its suffix
  rule stem1 {
    pattern {
      STEM < SUFF;
      STEM [!MGloss];
      SUFF [form = re"-.*"];
    }
    without { STEM [form = re"[-=].*"] }
    commands {
      STEM.MGloss = STEM.Gloss; STEM.MSeg = STEM.lemma
    }
  }

  % When the stem is at distance 2 from its suffix
  rule stem2 {
    pattern {
      STEM < CLIT1; CLIT1 < SUFF;
      STEM [!MGloss];
      CLIT1 [form = re"=.*"];
      SUFF [form = re"-.*"];
    }
    without { STEM [form = re"[-=].*"] }
    commands {
      STEM.MGloss = STEM.Gloss; STEM.MSeg = STEM.lemma;
      CLIT1.Incorporated = Yes;
    }
  }

  % When the stem is at distance 3 from its suffix
  rule stem3 {
    pattern {
      STEM < CLIT1; CLIT1 < CLIT2; CLIT2 < SUFF;
      STEM [!MGloss];
      CLIT1 [form = re"=.*"];
      CLIT2 [form = re"=.*"];
      SUFF [form = re"-.*"];
    }
    without { STEM [form = re"[-=].*"] }
    commands {
      STEM.MGloss = STEM.Gloss; STEM.MSeg = STEM.lemma;
      CLIT1.Incorporated = Yes;
      CLIT2.Incorporated = Yes;
    }
  }

}

% The merging operations
package suff {
  rule suffix1 {
    pattern {
      STEM < SUFF;
      STEM [];
      SUFF [form = re"-.*"];
    }
    % force the application order if there is more than one suffixes
    % "a -b -c" is rewritten "a-b -c" and then "a-b-c" ("a-b -c" is avoided by this without)
    without { PRE[form = re"-.*"]; PRE < STEM }
    without { STEM [form = re"[-=].*"] }
    commands {
      STEM.form = STEM.form + SUFF.form;
      append_feats SUFF =[re"RX\|GE\|Number\|Gender\|Case\|Person\|Aspect\|PronType"]=> STEM;
      append_feats SUFF =[re"MGloss"]=> STEM;
      append_feats SUFF =[re"MSeg"]=> STEM;
      STEM.AlignEnd = SUFF.AlignEnd;
      del_node SUFF;
    }
  }
  rule suffix2 {
    pattern {
      STEM < CLIT1; CLIT1 < SUFF;
      STEM [];
      CLIT1 [form = re"=.*"];
      SUFF [form = re"-.*"];
    }
    % force the application order if there is more than one suffixes
    % "a -b -c" is rewritten "a-b -c" and then "a-b-c" ("a-b -c" is avoided by this without)
    without { PRE[form = re"-.*"]; PRE < STEM }
    without { STEM [form = re"[-=].*"] }
    commands {
      STEM.form = STEM.form + SUFF.form;
      append_feats SUFF =[re"RX\|GE\|Number\|Gender\|Case\|Person\|Aspect\|PronType"]=> STEM;
      append_feats SUFF =[re"MGloss"]=> STEM;
      append_feats SUFF =[re"MSeg"]=> STEM;
      STEM.AlignEnd = SUFF.AlignEnd;
      STEM.textform = STEM.textform + SUFF.form;
      CLIT1.textform= "_";
      del_node SUFF;
    }
  }
  rule suffix3 {
    pattern {
      STEM < CLIT1; CLIT1 < CLIT2; CLIT2 < SUFF;
      STEM [];
      CLIT1 [form = re"=.*"];
      CLIT2 [form = re"=.*"];
      SUFF [form = re"-.*"];
    }
    % force the application order if there is more than one suffixes
    % "a -b -c" is rewritten "a-b -c" and then "a-b-c" ("a-b -c" is avoided by this without)
    without { PRE[form = re"-.*"]; PRE < STEM }
    without { STEM [form = re"[-=].*"] }
    commands {
      STEM.form = STEM.form + SUFF.form;
      append_feats SUFF =[re"RX\|GE\|Number\|Gender\|Case\|Person\|Aspect\|PronType"]=> STEM;
      append_feats SUFF =[re"MGloss"]=> STEM;
      append_feats SUFF =[re"MSeg"]=> STEM;
      STEM.AlignEnd = SUFF.AlignEnd;
      STEM.textform = STEM.textform + SUFF.form;
      CLIT1.textform= "_";
      CLIT2.textform= "_";
      del_node SUFF;
    }
  }
}

strat main { 
  Seq(
    Onf (init),
    Onf (suff),
    ) 
  }

